{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red155\green35\blue147;
\red11\green79\blue121;\red15\green104\blue160;\red28\green70\blue74;\red28\green0\blue207;\red108\green54\blue169;
\red196\green26\blue22;\red50\green109\blue116;\red57\green0\blue160;\red93\green108\blue121;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c60759\c13753\c57628;
\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c42190\c21278\c66379;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c36526\c42188\c47515;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 Q1\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 Thing\cf2  \{ \};\
\

\f1\b \cf4 void
\f0\b0 \cf2  \cf6 func\cf2 (
\f1\b \cf4 const
\f0\b0 \cf2  \cf7 Thing\cf2 & sth) \{\
    \
    \cf7 Thing\cf2 * p = &sth;\
    \
    *p = \cf8 17\cf2 ;\
\}\
\
Q2\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 B\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 virtual
\f0\b0 \cf2  
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 foo\cf2 (\cf7 B\cf2  b) \{ \cf9 cout\cf2  << \cf10 "b"\cf2 ; \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 D\cf2  : 
\f1\b \cf4 public
\f0\b0 \cf2  \cf7 B\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 foo\cf2 (\cf7 D\cf2  d) \{ \cf9 cout\cf2  << \cf10 "d"\cf2 ; \}\
\};\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf7 D\cf2  d;\
    \cf7 B\cf2 & b = d;\
    b.\cf11 foo\cf2 (d);\
    d.\cf11 foo\cf2 (b);\
\}\
\
Q3\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 B\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    \cf6 B\cf2 (
\f1\b \cf4 int
\f0\b0 \cf2  val = \cf8 42\cf2 ) : \cf11 n\cf2 (val) \{\}\
    
\f1\b \cf4 virtual
\f0\b0 \cf2  
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 foo\cf2 () 
\f1\b \cf4 const
\f0\b0 \cf2  \{ \cf9 cout\cf2  << \cf10 "B"\cf2 ; \}\

\f1\b \cf4 private
\f0\b0 \cf2 :\
    
\f1\b \cf4 int
\f0\b0 \cf2  n;\
\};\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 A\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 foo\cf2 () \{ \cf9 cout\cf2  << \cf10 "A"\cf2 ; \}\

\f1\b \cf4 private
\f0\b0 \cf2 :\
    \cf7 B\cf2  someB;\
\};\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf7 A\cf2  a;\
    a.\cf11 foo\cf2 ();\
\}\
\
Q4\
\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 B\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 foo\cf2 () \{ \cf9 exit\cf2 (\cf8 1\cf2 );\}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 A\cf2  \{\
    \cf7 B\cf2  b;\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 foo\cf2 () \{ \cf9 cout\cf2  << \cf8 2\cf2 ; \}\
\};\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf7 A\cf2  a;\
    a.\cf11 foo\cf2 ();\
\}\
\
\
Q5\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf12 vector\cf2 <
\f1\b \cf4 int
\f0\b0 \cf2 > v\{\cf8 6\cf2 , \cf8 42\cf2 \};\
    \cf9 cout\cf2  << *(\cf9 find_if\cf2 (v.\cf9 begin\cf2 () + \cf8 0\cf2 , v.\cf9 end\cf2 (), [] (
\f1\b \cf4 int
\f0\b0 \cf2  val) \{ 
\f1\b \cf4 return
\f0\b0 \cf2  val % \cf8 2\cf2  == \cf8 0\cf2 ; \})-\cf8 1\cf2 );\
\}\
\
Q6\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 X\cf2  \{\

\f1\b \cf4 protected
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 set\cf2 (string) \{ \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 A\cf2  : 
\f1\b \cf4 public
\f0\b0 \cf2  X \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 set\cf2 (
\f1\b \cf4 int
\f0\b0 \cf2 ) \{ \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 B\cf2  : 
\f1\b \cf4 public
\f0\b0 \cf2  X \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 set2\cf2 (A& a) \{\
        a.set(\cf10 ""\cf2 );\
    \}\
    \
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 set2\cf2 (B& b) \{\
        b.set(\cf10 "de"\cf2 );\
    \}\
\};\
\
Q7\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 A\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 virtual
\f0\b0 \cf2  
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 f\cf2 () \{ \cf9 cout\cf2  << \cf8 1\cf2 ; \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 B\cf2  : 
\f1\b \cf4 public
\f0\b0 \cf2  \cf7 A\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 virtual
\f0\b0 \cf2  
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 f\cf2 () 
\f1\b \cf4 override
\f0\b0 \cf2  \{ \cf9 cout\cf2  << \cf8 2\cf2 ; \}\
\};\
\

\f1\b \cf4 void
\f0\b0 \cf2  \cf6 f\cf2 (\cf7 A\cf2 & a) \{\
    \cf9 cout\cf2  << \cf8 3\cf2 ;\
    a.\cf11 f\cf2 ();\
\}\
\

\f1\b \cf4 void
\f0\b0 \cf2  \cf6 f\cf2 (\cf7 B\cf2 & b) \{\
    \cf9 cout\cf2  << \cf8 4\cf2 ;\
    b.\cf11 f\cf2 ();\
\}\
\

\f1\b \cf4 void
\f0\b0 \cf2  \cf6 of\cf2 (\cf7 A\cf2 & a) \{ \cf11 f\cf2 (a); \}\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf7 B\cf2  b;\
    \cf11 of\cf2 (b);\
\}\
\
Q8\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 X\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 w\cf2 () \{ \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 Y\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 w\cf2 () \{ \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 A\cf2 : 
\f1\b \cf4 public
\f0\b0 \cf2  \cf7 X\cf2 , 
\f1\b \cf4 public
\f0\b0 \cf2  \cf7 Y\cf2  \{\
    \
\};\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf7 A\cf2  a;\
    a.w();\
\}\
\
Q9\
\

\f1\b \cf4 template
\f0\b0 \cf2  <
\f1\b \cf4 typename
\f0\b0 \cf2  T, 
\f1\b \cf4 typename
\f0\b0 \cf2  U>\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 mycount\cf2 (T begin,T end, U pred) \{\
    
\f1\b \cf4 int
\f0\b0 \cf2  cnt = \cf8 0\cf2 ;\
    
\f1\b \cf4 for
\f0\b0 \cf2  (T iter = begin; iter != end; ++iter) \{\
        
\f1\b \cf4 if
\f0\b0 \cf2  (pred(*iter)) cnt++;\
    \}\
    
\f1\b \cf4 return
\f0\b0 \cf2  cnt;\
\}\

\f1\b \cf4 bool
\f0\b0 \cf2  \cf6 isEven\cf2 (
\f1\b \cf4 int
\f0\b0 \cf2  n) \{ 
\f1\b \cf4 return
\f0\b0 \cf2  n % \cf8 2\cf2  == \cf8 0\cf2 ;\}\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    
\f1\b \cf4 int
\f0\b0 \cf2  arr[] = \{\cf8 2\cf2 , \cf8 5\cf2 ,\cf8 2\cf2 ,\cf8 4\cf2 ,\cf8 5\cf2 ,\cf8 7\cf2 ,\cf8 2\cf2 \};\
    \cf9 cout\cf2  << \cf11 mycount\cf2 (arr, arr+\cf8 8\cf2 , \cf11 isEven\cf2 );\
\}\
\
Q10\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf12 vector\cf2 <
\f1\b \cf4 double
\f0\b0 \cf2 > myList\{\cf8 0.2\cf2 , \cf8 0.7\cf2 , \cf8 4.7\cf2 \};\
    
\f1\b \cf4 double
\f0\b0 \cf2  sum = \cf8 0\cf2 ;\
    
\f1\b \cf4 for
\f0\b0 \cf2  (\cf12 vector\cf2 <
\f1\b \cf4 double
\f0\b0 \cf2 >::\cf12 iterator\cf2  iter = myList.\cf9 begin\cf2 (); iter != myList.\cf9 end\cf2 (); ++iter) sum += *iter;\
    \cf9 cout\cf2  << sum;\
\}\
\
Q11\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf5 TernNode\cf2  \{ 
\f1\b \cf4 int
\f0\b0 \cf2  data; \cf7 TernNode\cf2  *left, *mid, *right;\
    \cf6 TernNode\cf2 (
\f1\b \cf4 int
\f0\b0 \cf2  d, \cf7 TernNode\cf2 * l = 
\f1\b \cf4 nullptr
\f0\b0 \cf2 , \cf7 TernNode\cf2 * m = 
\f1\b \cf4 nullptr
\f0\b0 \cf2 , \cf7 TernNode\cf2 * r = 
\f1\b \cf4 nullptr
\f0\b0 \cf2 ) : \cf11 data\cf2 (d), \cf11 left\cf2 (l), \cf11 mid\cf2 (m), \cf11 right\cf2 (r) \{ \} \};\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 treeMin\cf2 (
\f1\b \cf4 const
\f0\b0 \cf2  \cf7 TernNode\cf2 * root) \{\
    
\f1\b \cf4 if
\f0\b0 \cf2  (!root) 
\f1\b \cf4 throw
\f0\b0 \cf2  \cf12 invalid_argument\cf2 (\cf10 "invalid"\cf2 );\
    
\f1\b \cf4 int
\f0\b0 \cf2  minVal = root->\cf11 data\cf2 ;\
    
\f1\b \cf4 if
\f0\b0 \cf2  (root->\cf11 left\cf2 ) minVal = \cf9 min\cf2 (minVal, \cf11 treeMin\cf2 (root->\cf11 left\cf2 ));\
    
\f1\b \cf4 if
\f0\b0 \cf2  (root->\cf11 mid\cf2 ) minVal = \cf9 min\cf2 (minVal, \cf11 treeMin\cf2 (root->\cf11 mid\cf2 ));\
    
\f1\b \cf4 if
\f0\b0 \cf2  (root->\cf11 right\cf2 ) minVal = \cf9 min\cf2 (minVal, \cf11 treeMin\cf2 (root->\cf11 right\cf2 ));\
    
\f1\b \cf4 return
\f0\b0 \cf2  minVal;\
\}\
\

\f1\b \cf4 void
\f0\b0 \cf2  \cf6 baseThree\cf2 (
\f1\b \cf4 int
\f0\b0 \cf2  val) \{\
    
\f1\b \cf4 if
\f0\b0 \cf2  (val<\cf8 3\cf2 ) \{ \cf9 cout\cf2  << val; 
\f1\b \cf4 return
\f0\b0 \cf2 ; \}\
    \cf11 baseThree\cf2 (val / \cf8 3\cf2 );\
    \cf9 cout\cf2  << val % \cf8 3\cf2 ;\
\}\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
\cf13 //    baseThree(45);\cf2 \
    \
    \cf7 TernNode\cf2  a(\cf8 3\cf2 ), b(\cf8 6\cf2 ), c(\cf8 4\cf2 ), d(\cf8 7\cf2 , &a, &b, &c);;\
\cf13 //    cout << b.mid;\cf2 \
    \cf9 cout\cf2  << \cf11 treeMin\cf2 (&d);\
\}\
\
Q12\
\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 SLL\cf2  \{\
    
\f1\b \cf4 struct
\f0\b0 \cf2  \cf5 Node\cf2  \{\
        \cf6 Node\cf2 (
\f1\b \cf4 int
\f0\b0 \cf2  data = \cf8 0\cf2 , \cf7 Node\cf2 * next=
\f1\b \cf4 nullptr
\f0\b0 \cf2 ) : \cf11 data\cf2 (data), \cf11 next\cf2 (next) \{ \}\
        
\f1\b \cf4 int
\f0\b0 \cf2  data;\
        \cf7 Node\cf2 * next;\
    \};\
    \
    \cf7 Node\cf2 * headPtr;\
    \

\f1\b \cf4 public
\f0\b0 \cf2 :\
    
\f1\b \cf4 class
\f0\b0 \cf2  \cf5 Iterator\cf2  \{\
        \cf7 Node\cf2 * where;\
    
\f1\b \cf4 public
\f0\b0 \cf2 :\
        \cf6 Iterator\cf2 (\cf7 Node\cf2 * where=
\f1\b \cf4 nullptr
\f0\b0 \cf2 ) : \cf11 where\cf2 (where) \{ \}\
        \
        
\f1\b \cf4 friend
\f0\b0 \cf2  
\f1\b \cf4 bool
\f0\b0 \cf2  
\f1\b \cf4 operator
\f0\b0 \cf2  !=(
\f1\b \cf4 const
\f0\b0 \cf2  \cf7 Iterator\cf2 & lhs, 
\f1\b \cf4 const
\f0\b0 \cf2  \cf7 Iterator\cf2 & rhs) \{ 
\f1\b \cf4 return
\f0\b0 \cf2  lhs.\cf11 where\cf2  != rhs.\cf11 where\cf2 ; \}\
        \
        \cf7 Iterator\cf2 & 
\f1\b \cf4 operator
\f0\b0 \cf2  ++() \{ \cf11 where\cf2  = \cf11 where\cf2 ->\cf11 next\cf2 ; 
\f1\b \cf4 return
\f0\b0 \cf2  *
\f1\b \cf4 this
\f0\b0 \cf2 ; \}\
        \
        
\f1\b \cf4 int
\f0\b0 \cf2 & 
\f1\b \cf4 operator
\f0\b0 \cf2  *() 
\f1\b \cf4 const
\f0\b0 \cf2  \{ 
\f1\b \cf4 return
\f0\b0 \cf2  \cf11 where\cf2 ->\cf11 data\cf2 ; \}\
        \
    \};\
    \cf6 SLL\cf2 () \{ \cf11 headPtr\cf2  = 
\f1\b \cf4 nullptr
\f0\b0 \cf2 ; \}\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 addFront\cf2 (
\f1\b \cf4 int
\f0\b0 \cf2  data) \{\
        \cf11 headPtr\cf2  = 
\f1\b \cf4 new
\f0\b0 \cf2  \cf7 Node\cf2 (data, \cf11 headPtr\cf2 );\
    \}\
    \cf7 Iterator\cf2  \cf6 begin\cf2 () \{\
        
\f1\b \cf4 return
\f0\b0 \cf2  \cf7 Iterator\cf2 (\cf11 headPtr\cf2 );\
    \}\
    \cf7 Iterator\cf2  \cf6 end\cf2 () \{ 
\f1\b \cf4 return
\f0\b0 \cf2  \cf7 Iterator\cf2 (
\f1\b \cf4 nullptr
\f0\b0 \cf2 );  \}\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 printSLL\cf2 () \{\
        \cf7 Node\cf2 * nd = \cf11 headPtr\cf2 ;\
        
\f1\b \cf4 while
\f0\b0 \cf2  (nd) \{\
            \cf9 cout\cf2  << nd->\cf11 data\cf2  << \cf8 ' '\cf2 ;\
            nd = nd->\cf11 next\cf2 ;\
        \}\
    \}\
\};\
\

\f1\b \cf4 void
\f0\b0 \cf2  \cf6 doubleValues\cf2 (\cf7 SLL\cf2 & v) \{\
    
\f1\b \cf4 for
\f0\b0 \cf2  (\cf7 SLL\cf2 ::\cf7 Iterator\cf2  it = v.\cf11 begin\cf2 (); it != v.\cf11 end\cf2 (); ++it) \{\
        
\f1\b \cf4 int
\f0\b0 \cf2 & val = *it;\
        val *= \cf8 2\cf2 ;\
    \}\
\}\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf7 SLL\cf2  v;\
    v.\cf11 addFront\cf2 (\cf8 22\cf2 );\
    v.\cf11 addFront\cf2 (\cf8 3\cf2 );\
    v.\cf11 addFront\cf2 (\cf8 7\cf2 );\
    v.\cf11 addFront\cf2 (\cf8 9\cf2 );\
    v.\cf11 printSLL\cf2 ();\
    \cf9 cout\cf2  << \cf9 endl\cf2 ;\
    \cf11 doubleValues\cf2 (v);\
    v.\cf11 printSLL\cf2 ();\
    \
\}\
\
\
Q13\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf5 Node\cf2  \{\
    \cf6 Node\cf2 (
\f1\b \cf4 int
\f0\b0 \cf2  data=\cf8 0\cf2 , \cf7 Node\cf2 * next=
\f1\b \cf4 nullptr
\f0\b0 \cf2 ) :\cf11 data\cf2 (data), \cf11 next\cf2 (next) \{ \}\
    
\f1\b \cf4 int
\f0\b0 \cf2  data;\
    \cf7 Node\cf2 * next;\
\};\
\
\cf7 Node\cf2 * \cf6 buildList\cf2 (
\f1\b \cf4 const
\f0\b0 \cf2  \cf12 vector\cf2 <
\f1\b \cf4 int
\f0\b0 \cf2 >& v) \{\
    \cf7 Node\cf2 * head = 
\f1\b \cf4 nullptr
\f0\b0 \cf2 ;\
    
\f1\b \cf4 for
\f0\b0 \cf2  (\cf12 size_t\cf2  i=v.\cf9 size\cf2 (); i>\cf8 0\cf2 ; --i) head = 
\f1\b \cf4 new
\f0\b0 \cf2  \cf7 Node\cf2 (v[i-\cf8 1\cf2 ], head);\
    
\f1\b \cf4 return
\f0\b0 \cf2  head;\
\}\
\

\f1\b \cf4 void
\f0\b0 \cf2  \cf6 printList\cf2 (
\f1\b \cf4 const
\f0\b0 \cf2  \cf7 Node\cf2 * nd) \{\
    
\f1\b \cf4 if
\f0\b0 \cf2  (!nd) 
\f1\b \cf4 return
\f0\b0 \cf2 ;\
    \cf9 cout\cf2  << nd->\cf11 data\cf2  << \cf8 ' '\cf2 ;\
    \cf11 printList\cf2 (nd->\cf11 next\cf2 );\
\}\
\

\f1\b \cf4 bool
\f0\b0 \cf2  \cf6 removeLastValue\cf2 (\cf7 Node\cf2 *& head, 
\f1\b \cf4 int
\f0\b0 \cf2  tgt) \{\
    
\f1\b \cf4 if
\f0\b0 \cf2  (!head) 
\f1\b \cf4 return
\f0\b0 \cf2  
\f1\b \cf4 false
\f0\b0 \cf2 ;\
    \cf7 Node\cf2 * curr = head;\
    \cf7 Node\cf2 * bfor = 
\f1\b \cf4 nullptr
\f0\b0 \cf2 ;\
    
\f1\b \cf4 if
\f0\b0 \cf2  (curr->\cf11 data\cf2  == tgt) bfor = head;\
    
\f1\b \cf4 while
\f0\b0 \cf2 (curr->\cf11 next\cf2 ) \{\
        
\f1\b \cf4 if
\f0\b0 \cf2  (curr->\cf11 next\cf2 ->\cf11 data\cf2  == tgt) bfor = curr;\
        curr = curr->\cf11 next\cf2 ;\
    \}\
    
\f1\b \cf4 if
\f0\b0 \cf2  (bfor == head) \{\
        \cf7 Node\cf2 * toDel = head;\
        head = toDel->\cf11 next\cf2 ;\
        
\f1\b \cf4 delete
\f0\b0 \cf2  toDel;\
        
\f1\b \cf4 return
\f0\b0 \cf2  
\f1\b \cf4 true
\f0\b0 \cf2 ;\
    \}\
    
\f1\b \cf4 if
\f0\b0 \cf2  (bfor != 
\f1\b \cf4 nullptr
\f0\b0 \cf2 ) \{\
        \cf7 Node\cf2 * toDel = bfor->\cf11 next\cf2 ;\
        bfor->\cf11 next\cf2  = toDel->\cf11 next\cf2 ;\
        
\f1\b \cf4 delete
\f0\b0 \cf2  toDel;\
        
\f1\b \cf4 return
\f0\b0 \cf2  
\f1\b \cf4 true
\f0\b0 \cf2 ;\
    \}\
    
\f1\b \cf4 return
\f0\b0 \cf2  
\f1\b \cf4 false
\f0\b0 \cf2 ;\
\}\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf7 Node\cf2 * a = \cf11 buildList\cf2 (\{\cf8 7\cf2 ,\cf8 2\cf2 ,\cf8 2\cf2 ,\cf8 3\cf2 ,\cf8 2\cf2 ,\cf8 5\cf2 , \cf8 5\cf2 \});\
    \cf11 printList\cf2 (a);\
    \cf9 cout\cf2  << \cf9 boolalpha\cf2  << \cf11 removeLastValue\cf2 (a, \cf8 5\cf2 ) << \cf9 endl\cf2 ;\
    \cf11 printList\cf2 (a);\
    \
\}\
\
Q14\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 Performer\cf2  \{\
    \cf12 string\cf2  name;\
    
\f1\b \cf4 bool
\f0\b0 \cf2  isEmployed;\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    \cf6 Performer\cf2 (
\f1\b \cf4 const
\f0\b0 \cf2  \cf12 string\cf2 & name) : \cf11 name\cf2 (name), \cf11 isEmployed\cf2 (
\f1\b \cf4 false
\f0\b0 \cf2 ) \{ \}\
    
\f1\b \cf4 virtual
\f0\b0 \cf2  
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 perform\cf2 () 
\f1\b \cf4 const
\f0\b0 \cf2  = \cf8 0\cf2 ;\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 makeEmployed\cf2 () \{ \cf11 isEmployed\cf2  = 
\f1\b \cf4 true
\f0\b0 \cf2 ; \}\
    
\f1\b \cf4 bool
\f0\b0 \cf2  \cf6 IsEmployed\cf2 () 
\f1\b \cf4 const
\f0\b0 \cf2  \{ 
\f1\b \cf4 return
\f0\b0 \cf2  \cf11 isEmployed\cf2 ; \}\
    
\f1\b \cf4 const
\f0\b0 \cf2  \cf12 string\cf2 & \cf6 getName\cf2 () 
\f1\b \cf4 const
\f0\b0 \cf2  \{ 
\f1\b \cf4 return
\f0\b0 \cf2  \cf11 name\cf2 ; \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 Mime\cf2  : 
\f1\b \cf4 public
\f0\b0 \cf2  \cf7 Performer\cf2  \{\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    \cf6 Mime\cf2 (
\f1\b \cf4 const
\f0\b0 \cf2  \cf12 string\cf2 & name) : \cf7 Performer\cf2 (name) \{ \}\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 perform\cf2 () 
\f1\b \cf4 const
\f0\b0 \cf2  \{ \cf9 cout\cf2  << \cf10 "(silence)"\cf2  << \cf9 endl\cf2 ; \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 Actor\cf2  : 
\f1\b \cf4 public
\f0\b0 \cf2  \cf7 Performer\cf2  \{\
    \cf12 string\cf2  script;\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    \cf6 Actor\cf2 (
\f1\b \cf4 const
\f0\b0 \cf2  \cf12 string\cf2 & name, 
\f1\b \cf4 const
\f0\b0 \cf2  \cf12 string\cf2 & scr) : \cf7 Performer\cf2 (name), \cf11 script\cf2 (scr) \{ \}\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 perform\cf2 () 
\f1\b \cf4 const
\f0\b0 \cf2  \{ \cf9 cout\cf2  << \cf10 "I am "\cf2  << \cf11 getName\cf2 () << \cf10 ". "\cf2  << \cf11 script\cf2  << \cf9 endl\cf2 ; \}\
\};\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf5 Company\cf2  \{\
    \cf12 vector\cf2 <\cf7 Performer\cf2 *> pPtrV;\

\f1\b \cf4 public
\f0\b0 \cf2 :\
    \cf6 Company\cf2 () \{ \}\
    
\f1\b \cf4 bool
\f0\b0 \cf2  \cf6 hire\cf2 (\cf7 Performer\cf2 & rhs) \{\
        
\f1\b \cf4 if
\f0\b0 \cf2  (rhs.\cf11 IsEmployed\cf2 ()) 
\f1\b \cf4 return
\f0\b0 \cf2  
\f1\b \cf4 false
\f0\b0 \cf2 ;\
        \cf11 pPtrV\cf2 .\cf9 push_back\cf2 (&rhs);\
        rhs.\cf11 makeEmployed\cf2 ();\
        
\f1\b \cf4 return
\f0\b0 \cf2  
\f1\b \cf4 true
\f0\b0 \cf2 ;\
    \}\
    
\f1\b \cf4 void
\f0\b0 \cf2  \cf6 showtime\cf2 () 
\f1\b \cf4 const
\f0\b0 \cf2  \{\
        
\f1\b \cf4 for
\f0\b0 \cf2  (\cf12 size_t\cf2  idx = \cf8 0\cf2 ; idx < \cf11 pPtrV\cf2 .\cf9 size\cf2 (); ++idx) \cf11 pPtrV\cf2 [idx]->\cf11 perform\cf2 ();\
    \}\
\};\
\

\f1\b \cf4 int
\f0\b0 \cf2  \cf6 main\cf2 () \{\
    \cf7 Company\cf2  troupe;\
    \cf7 Company\cf2  otherTroupe;\
    \cf7 Actor\cf2  frog(\cf10 "Froggie"\cf2 , \cf10 "Hiya, kids!"\cf2 );\
    \cf7 Mime\cf2  red(\cf10 "Red Skelton"\cf2 );\
    \cf7 Actor\cf2  bogie(\cf10 "Humphrey Bogart"\cf2 , \cf10 "Play it again."\cf2 );\
    troupe.\cf11 hire\cf2 (frog);\
    otherTroupe.\cf11 hire\cf2 (frog);\
    troupe.\cf11 hire\cf2 (red);\
    troupe.\cf11 hire\cf2 (bogie);\
    troupe.\cf11 showtime\cf2 ();\
\}\
\
}