{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red93\green108\blue121;
\red74\green85\blue96;\red155\green35\blue147;\red11\green79\blue121;\red15\green104\blue160;\red108\green54\blue169;
\red196\green26\blue22;\red28\green70\blue74;\red50\green109\blue116;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c36526\c42188\c47515;
\csgenericrgb\c29020\c33333\c37647;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c42190\c21278\c66379;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c19418\c42935\c45455;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \
\
\cf4 //
\f1\b \cf5 MARK: explicitly calling destructor results in double call, undefined behavior
\f0\b0 \cf2 \
\

\f1\b \cf6 class
\f0\b0 \cf2  \cf7 Member\cf2  \{\

\f1\b \cf6 public
\f0\b0 \cf2 :\
    \cf8 Member\cf2 () \{ \cf9 cout\cf2  << \cf10 "Constructor Member"\cf2  << \cf9 endl\cf2 ;\}\
    \cf8 Member\cf2 (
\f1\b \cf6 int
\f0\b0 \cf2 ) \{ \cf9 cout\cf2  << \cf10 " seconf "\cf2 ; \}\
    \
    ~\cf8 Member\cf2 () \{ \cf9 cout\cf2  << \cf10 "Destructor Member"\cf2  << \cf9 endl\cf2 ; \}\
    \
    \cf8 Member\cf2 (
\f1\b \cf6 const
\f0\b0 \cf2  \cf11 Member\cf2 & mb) \{ \cf9 cout\cf2  << \cf10 "CC Member"\cf2  << \cf9 endl\cf2 ; \}\
    \
    \cf11 Member\cf2 & 
\f1\b \cf6 operator
\f0\b0 \cf2 =(
\f1\b \cf6 const
\f0\b0 \cf2  \cf11 Member\cf2 & rhs) \{ \cf9 cout\cf2  << \cf10 "Ass-op Member\\n"\cf2 ; 
\f1\b \cf6 return
\f0\b0 \cf2  *
\f1\b \cf6 this
\f0\b0 \cf2 ; \}\
\};\
\

\f1\b \cf6 class
\f0\b0 \cf2  \cf7 Parent\cf2  \{\

\f1\b \cf6 public
\f0\b0 \cf2 :\
    \cf8 Parent\cf2 () \{ \cf9 cout\cf2  << \cf10 "Constructor Parent"\cf2  << \cf9 endl\cf2 ;\}\
\
    
\f1\b \cf6 virtual
\f0\b0 \cf2  ~\cf8 Parent\cf2 () \{ \cf9 cout\cf2  << \cf10 "Destructor Parent"\cf2  << \cf9 endl\cf2 ; \}\
\
    \cf8 Parent\cf2 (
\f1\b \cf6 const
\f0\b0 \cf2  \cf11 Parent\cf2 & mb) \{ \cf9 cout\cf2  << \cf10 "CC Parent"\cf2  << \cf9 endl\cf2 ; \}\
\cf4 //    Parent(const Parent& mb, const Member& m1 = Member()) : m1(m1) \{ cout << "CC Parent" << endl; \}\cf2 \
\
    \cf11 Parent\cf2 & 
\f1\b \cf6 operator
\f0\b0 \cf2 =(
\f1\b \cf6 const
\f0\b0 \cf2  \cf11 Parent\cf2 & rhs) \{ \cf9 cout\cf2  << \cf10 "Ass-op Parent\\n"\cf2 ; 
\f1\b \cf6 return
\f0\b0 \cf2  *
\f1\b \cf6 this
\f0\b0 \cf2 ; \}\
\cf4 //    Parent& operator=(const Parent& rhs) \{ cout << "Ass-op Parent\\n"; return *this; \}\cf2 \
    \

\f1\b \cf6 private
\f0\b0 \cf2 :\
    
\f1\b \cf6 int
\f0\b0 \cf2  x;\
\cf4 //    Member m1;\cf2 \

\f1\b \cf6 protected
\f0\b0 \cf2 :\
    
\f1\b \cf6 void
\f0\b0 \cf2  \cf8 y\cf2 () \{ \cf9 cout\cf2  << \cf10 "hi"\cf2 ; \}\
\};\
\

\f1\b \cf6 class
\f0\b0 \cf2  \cf7 Child\cf2 : 
\f1\b \cf6 public
\f0\b0 \cf2  \cf11 Parent\cf2  \{\

\f1\b \cf6 public
\f0\b0 \cf2 :\
    \cf8 Child\cf2 () \{ \cf9 cout\cf2  << \cf10 "Constructor Child"\cf2  << \cf9 endl\cf2 ;\}\
\
    ~\cf8 Child\cf2 () \{ \cf9 cout\cf2  << \cf10 "Destructor Child"\cf2  << \cf9 endl\cf2 ; \}\
\
    \cf8 Child\cf2 (
\f1\b \cf6 const
\f0\b0 \cf2  \cf11 Child\cf2 & mb): \cf11 Parent\cf2 (mb) \{ \cf9 cout\cf2  << \cf10 "CC Child"\cf2  << \cf9 endl\cf2 ; \}\
\
    \cf11 Child\cf2 & 
\f1\b \cf6 operator
\f0\b0 \cf2 =(
\f1\b \cf6 const
\f0\b0 \cf2  \cf11 Child\cf2 & rhs) \{ \cf11 Parent\cf2 ::
\f1\b \cf6 operator
\f0\b0 \cf2 =(rhs); \cf9 cout\cf2  << \cf10 "Ass-op Child\\n"\cf2 ; 
\f1\b \cf6 return
\f0\b0 \cf2  *
\f1\b \cf6 this
\f0\b0 \cf2 ; \}\
    \
    
\f1\b \cf6 void
\f0\b0 \cf2  \cf8 ti\cf2 () \{ \cf12 y\cf2 (); \}\
    \

\f1\b \cf6 private
\f0\b0 \cf2 :\
    \cf11 Member\cf2  m1;\
\
\};\
\

\f1\b \cf6 class
\f0\b0 \cf2  \cf7 GChild\cf2 : 
\f1\b \cf6 public
\f0\b0 \cf2  \cf11 Child\cf2  \{\
\cf4 //    GChild() \{ cout << "Constructor GChild" << endl;\}\cf2 \
\cf4 //\cf2 \
\cf4 //    ~GChild() \{ cout << "Destructor GChild" << endl; \}\cf2 \
\cf4 //\cf2 \
\cf4 //    GChild(const GChild& mb) \{ cout << "CC GChild" << endl; \}\cf2 \
\cf4 //\cf2 \
\cf4 //    GChild& operator=(const GChild& rhs) \{ cout << "Ass-op GChild\\n"; return *this; \}\cf2 \
\
\};\
\
\

\f1\b \cf6 int
\f0\b0 \cf2  \cf8 main\cf2 () \{\
    \
\cf4 //    Parent x; // cstr p\cf2 \
\cf4 //    Parent y = x; // cc p\cf2 \
\cf4 //    x = y; // ass-op p\cf2 \
\cf4 //\cf2 \
\cf4 //    // des p x 2\cf2 \
    \
\cf4 //    Child x; // cstr p, c\cf2 \
\cf4 //    Child y = x; // cstr p, cc p\cf2 \
\cf4 //    x = y; // ass-op p, c\cf2 \
\cf4 //\cf2 \
\cf4 //    // des c, p x 2\cf2 \
    \
    \
    \cf11 Child\cf2  o;\
    \cf9 cout\cf2  << \cf10 "hi"\cf2  << \cf9 endl\cf2 ;\
    \cf11 Child\cf2  a = o; \cf4 // con m, cc p, cc ch\cf2 \
    \cf9 cout\cf2  << \cf10 "hi"\cf2  << \cf9 endl\cf2 ;\
\cf4 //    a = o;\cf2 \
\cf4 //    cout << "hi" << endl;\cf2 \
\cf4 //    o.ti();\cf2 \
\cf4 //    (new Child(*o));\cf2 \
    \
    \
\cf4 //    Parent k = *x;\cf2 \
\cf4 //    x->y();\cf2 \
    \cf4 // Parent* x(&o);\cf2 \
    \
\}\
}