{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red93\green108\blue121;
\red100\green56\blue32;\red196\green26\blue22;\red155\green35\blue147;\red11\green79\blue121;\red28\green0\blue207;
\red57\green0\blue160;\red28\green70\blue74;\red15\green104\blue160;\red50\green109\blue116;\red108\green54\blue169;
\red74\green85\blue96;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c36526\c42188\c47515;
\csgenericrgb\c39147\c22031\c12446;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c11000\c0\c81000;
\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c42190\c21278\c66379;
\csgenericrgb\c29020\c33333\c37647;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \
\
\cf4 //#include <bits/stdc++.h>\cf2 \
\cf5 #include \cf6 <vector>\cf2 \
\cf5 #include \cf6 <string>\cf2 \
\cf5 #include \cf6 <iostream>\cf2 \
\cf5 #include \cf6 <list>\cf2 \
\cf5 #include \cf6 <map>\cf2 \
\cf5 #include \cf6 <queue>\cf2 \
\cf5 #include \cf6 <fstream>\cf2 \
\

\f1\b \cf7 using
\f0\b0 \cf2  
\f1\b \cf7 namespace
\f0\b0 \cf2  \cf8 std\cf2 ;\
\cf4 // C++ program to encode and decode a string using\cf2 \
\cf4 // Huffman Coding.\cf2 \
\cf5 #define MAX_TREE_HT \cf9 256\cf2 \

\f1\b \cf7 using
\f0\b0 \cf2  
\f1\b \cf7 namespace
\f0\b0 \cf2  \cf8 std\cf2 ;\
\
\cf4 // to map each character its huffman value\cf2 \
\cf10 map\cf2 <
\f1\b \cf7 char
\f0\b0 \cf2 , \cf10 string\cf2 > codes;\
\
\cf4 // to store the frequency of character of the input data\cf2 \
\cf10 map\cf2 <
\f1\b \cf7 char
\f0\b0 \cf2 , 
\f1\b \cf7 int
\f0\b0 \cf2 > freq;\
\
\cf4 // A Huffman tree node\cf2 \

\f1\b \cf7 struct
\f0\b0 \cf2  \cf8 MinHeapNode\cf2 \
\{\
    
\f1\b \cf7 char
\f0\b0 \cf2  data;             \cf4 // One of the input characters\cf2 \
    
\f1\b \cf7 int
\f0\b0 \cf2  freq;             \cf4 // Frequency of the character\cf2 \
    \cf11 MinHeapNode\cf2  *left, *right; \cf4 // Left and right child\cf2 \
\
    \cf12 MinHeapNode\cf2 (
\f1\b \cf7 char
\f0\b0 \cf2  data, 
\f1\b \cf7 int
\f0\b0 \cf2  freq)\
    \{\
        \cf13 left\cf2  = \cf13 right\cf2  = 
\f1\b \cf7 NULL
\f0\b0 \cf2 ;\
        
\f1\b \cf7 this
\f0\b0 \cf2 ->\cf13 data\cf2  = data;\
        
\f1\b \cf7 this
\f0\b0 \cf2 ->\cf13 freq\cf2  = freq;\
    \}\
\};\
\
\cf4 // utility function for the priority queue\cf2 \

\f1\b \cf7 struct
\f0\b0 \cf2  \cf8 compare\cf2 \
\{\
    
\f1\b \cf7 bool
\f0\b0 \cf2  
\f1\b \cf7 operator
\f0\b0 \cf2 ()(\cf11 MinHeapNode\cf2 * l, \cf11 MinHeapNode\cf2 * r)\
    \{\
        
\f1\b \cf7 return
\f0\b0 \cf2  (l->freq > r->freq);\
    \}\
\};\
\
\cf4 // utility function to print characters along with\cf2 \
\cf4 // there huffman value\cf2 \
\cf4 // 'compress\cf2 \

\f1\b \cf7 void
\f0\b0 \cf2  \cf12 printCodes\cf2 (
\f1\b \cf7 struct
\f0\b0 \cf2  MinHeapNode* root, string str)\
\{\
    
\f1\b \cf7 if
\f0\b0 \cf2  (!root)\
        
\f1\b \cf7 return
\f0\b0 \cf2 ;\
    
\f1\b \cf7 if
\f0\b0 \cf2  (root->data != \cf9 '$'\cf2 )\
        cout << root->data << \cf6 ": "\cf2  << str << \cf6 "\\n"\cf2 ;\
    printCodes(root->left, str + \cf6 "0"\cf2 );\
    printCodes(root->right, str + \cf6 "1"\cf2 );\
    \
    \cf4 // 00 11 11 011 100 1010 1011 010 00 11 11 011 100\cf2 \
\}\
\
\cf4 // utility function to store characters along with\cf2 \
\cf4 // there huffman value in a hash table, here we\cf2 \
\cf4 // have C++ STL map\cf2 \

\f1\b \cf7 void
\f0\b0 \cf2  \cf12 storeCodes\cf2 (
\f1\b \cf7 struct
\f0\b0 \cf2  MinHeapNode* root, string str)\
\{\
    
\f1\b \cf7 if
\f0\b0 \cf2  (root==
\f1\b \cf7 NULL
\f0\b0 \cf2 )\
        
\f1\b \cf7 return
\f0\b0 \cf2 ;\
    
\f1\b \cf7 if
\f0\b0 \cf2  (root->data != \cf9 '$'\cf2 )\
        codes[root->data]=str;\
    storeCodes(root->left, str + \cf6 "0"\cf2 );\
    storeCodes(root->right, str + \cf6 "1"\cf2 );\
\}\
\
\cf4 // STL priority queue to store heap tree, with respect\cf2 \
\cf4 // to their heap root node value\cf2 \
priority_queue<MinHeapNode*, vector<MinHeapNode*>, compare> minHeap;\
\
\cf4 // function to build the Huffman tree and store it\cf2 \
\cf4 // in minHeap\cf2 \

\f1\b \cf7 void
\f0\b0 \cf2  \cf12 HuffmanCodes\cf2 (
\f1\b \cf7 int
\f0\b0 \cf2  size)\
\{\
    
\f1\b \cf7 struct
\f0\b0 \cf2  \cf8 MinHeapNode\cf2  *left, *right, *top;\
    
\f1\b \cf7 for
\f0\b0 \cf2  (map<
\f1\b \cf7 char
\f0\b0 \cf2 , 
\f1\b \cf7 int
\f0\b0 \cf2 >::iterator v=freq.begin(); v!=freq.end(); v++)\
        minHeap.push(
\f1\b \cf7 new
\f0\b0 \cf2  MinHeapNode(v->first, v->second));\
    
\f1\b \cf7 while
\f0\b0 \cf2  (minHeap.size() != \cf9 1\cf2 )\
    \{\
        left = minHeap.top();\
        minHeap.pop();\
        right = minHeap.top();\
        minHeap.pop();\
        top = 
\f1\b \cf7 new
\f0\b0 \cf2  MinHeapNode(\cf9 '$'\cf2 , left->freq + right->freq);\
        top->left = left;\
        top->right = right;\
        minHeap.push(top);\
    \}\
    storeCodes(minHeap.top(), \cf6 ""\cf2 );\
\}\
\
\cf4 // utility function to store map each character with its\cf2 \
\cf4 // frequency in input string\cf2 \

\f1\b \cf7 void
\f0\b0 \cf2  \cf12 calcFreq\cf2 (string str, 
\f1\b \cf7 int
\f0\b0 \cf2  n)\
\{\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 int
\f0\b0 \cf2  i=\cf9 0\cf2 ; i<str.size(); i++)\
        freq[str[i]]++;\
\}\
\
\cf4 // function iterates through the encoded string s\cf2 \
\cf4 // if s[i]=='1' then move to node->right\cf2 \
\cf4 // if s[i]=='0' then move to node->left\cf2 \
\cf4 // if leaf node append the node->data to our output string\cf2 \
string \cf12 decode_file\cf2 (
\f1\b \cf7 struct
\f0\b0 \cf2  MinHeapNode* root, string s)\
\{\
    string ans = \cf6 ""\cf2 ;\
    
\f1\b \cf7 struct
\f0\b0 \cf2  \cf8 MinHeapNode\cf2 * curr = root;\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 int
\f0\b0 \cf2  i=\cf9 0\cf2 ;i<s.size();i++)\
    \{\
        
\f1\b \cf7 if
\f0\b0 \cf2  (s[i] == \cf9 '0'\cf2 )\
        curr = curr->left;\
        
\f1\b \cf7 else
\f0\b0 \cf2 \
        curr = curr->right;\
\
        \cf4 // reached leaf node\cf2 \
        
\f1\b \cf7 if
\f0\b0 \cf2  (curr->left==
\f1\b \cf7 NULL
\f0\b0 \cf2  
\f1\b \cf7 and
\f0\b0 \cf2  curr->right==
\f1\b \cf7 NULL
\f0\b0 \cf2 )\
        \{\
            ans += curr->data;\
            curr = root;\
        \}\
    \}\
    \cf4 // cout<<ans<<endl;\cf2 \
    
\f1\b \cf7 return
\f0\b0 \cf2  ans+\cf9 '\\0'\cf2 ;\
\}\
\
\cf4 // Driver program to test above functions\cf2 \

\f1\b \cf7 int
\f0\b0 \cf2  \cf12 main1\cf2 ()\
\{\
    exit(\cf9 0\cf2 );\
    \
    string str = \cf6 "geeksforgeeks"\cf2 ;\
    string encodedString, decodedString;\
    calcFreq(str, str.length());\
    HuffmanCodes(str.length());\
    cout << \cf6 "Character With there Frequencies:\\n"\cf2 ;\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 auto
\f0\b0 \cf2  v=codes.begin(); v!=codes.end(); v++)\
        cout << v->first <<\cf9 ' '\cf2  << v->second << endl;\
\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 auto
\f0\b0 \cf2  i: str)\
        encodedString+=\cf13 codes\cf2 [i];\
\
    \cf14 cout\cf2  << \cf6 "\\nEncoded Huffman data:\\n"\cf2  << encodedString << \cf14 endl\cf2 ;\
\
    decodedString = \cf13 decode_file\cf2 (\cf13 minHeap\cf2 .\cf14 top\cf2 (), encodedString);\
    \cf14 cout\cf2  << \cf6 "\\nDecoded Huffman Data:\\n"\cf2  << decodedString << \cf14 endl\cf2 ;\
    
\f1\b \cf7 return
\f0\b0 \cf2  \cf9 0\cf2 ;\
\}\
\
\cf5 #include \cf6 <mutex>\cf2 \
\cf5 #include \cf6 <thread>\cf2 \
\cf10 std\cf2 ::\cf10 mutex\cf2  mtx;\

\f1\b \cf7 void
\f0\b0 \cf2  \cf12 myMethod\cf2  () \{\
\cf4 //    mtx.lock();\cf2 \
    \cf10 std\cf2 ::\cf14 cout\cf2 << \cf6 "values are ::"\cf2 ;\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 int
\f0\b0 \cf2  z=\cf9 0\cf2 ; z< \cf9 10\cf2 ; ++z) \{\
        \cf10 std\cf2 ::\cf14 cout\cf2 << z;\
        \cf10 std\cf2 ::\cf14 cout\cf2 << \cf9 '\\n'\cf2 ;\
    \}\
    \cf10 std\cf2 ::\cf14 cout\cf2 << \cf6 "End of output !\\n"\cf2 ;\
\cf4 //    mtx.unlock();\cf2 \
\}\
\
\cf5 #include \cf6 <unordered_map>\cf2 \

\f1\b \cf7 using
\f0\b0 \cf2  
\f1\b \cf7 namespace
\f0\b0 \cf2  \cf10 std\cf2 ;\
\
\cf5 #include \cf6 <unordered_set>\cf2 \
\cf4 //unordered_set<char> set;\cf2 \
\cf4 // an index of the string : the set of odd characters <if set count is 1 or zero, it is a palindrome>\cf2 \
\cf10 unordered_map\cf2 <
\f1\b \cf7 int
\f0\b0 \cf2 , \cf10 unordered_set\cf2 <
\f1\b \cf7 char
\f0\b0 \cf2 >> memo;\

\f1\b \cf7 bool
\f0\b0 \cf2  \cf12 yes2\cf2 (\cf10 string\cf2 & str, 
\f1\b \cf7 int
\f0\b0 \cf2  l, 
\f1\b \cf7 int
\f0\b0 \cf2  r) \{\
    \cf4 // look through every index from l to r\cf2 \
    \cf4 // for every one, look at the previous?\cf2 \
    \cf4 // if exist in the map, continue, but store the map\cf2 \
    \cf10 unordered_set\cf2 <
\f1\b \cf7 char
\f0\b0 \cf2 > set1, set2;\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 int
\f0\b0 \cf2  i = l; i <= r; ++r) \{\
        \cf4 // if already exists, keep going till the i\cf2 \
    \}\
\}\
\

\f1\b \cf7 bool
\f0\b0 \cf2  \cf12 yes\cf2 (\cf10 string\cf2 & str, 
\f1\b \cf7 int
\f0\b0 \cf2  l, 
\f1\b \cf7 int
\f0\b0 \cf2  r) \{\
    \cf10 unordered_map\cf2 <
\f1\b \cf7 char
\f0\b0 \cf2 , 
\f1\b \cf7 int
\f0\b0 \cf2 > mp;\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 char
\f0\b0 \cf2  i = l; i <= r; ++i) \{\
        ++mp[str[i - \cf9 1\cf2 ]];\
    \}\
    \cf4 // can only be one odd\cf2 \
    
\f1\b \cf7 int
\f0\b0 \cf2  odds = \cf9 0\cf2 ;\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 auto
\f0\b0 \cf2  pair : mp) \{\
        
\f1\b \cf7 if
\f0\b0 \cf2  (pair.\cf14 second\cf2  % \cf9 2\cf2  == \cf9 1\cf2 ) \{\
            
\f1\b \cf7 if
\f0\b0 \cf2  (++odds == \cf9 2\cf2 ) \{\
                
\f1\b \cf7 return
\f0\b0 \cf2  
\f1\b \cf7 false
\f0\b0 \cf2 ;\
            \}\
        \}\
    \}\
    
\f1\b \cf7 return
\f0\b0 \cf2  
\f1\b \cf7 true
\f0\b0 \cf2 ;\
\}\
\
\

\f1\b \cf7 int
\f0\b0 \cf2  \cf12 positiveAnswersCount\cf2 (
\f1\b \cf7 int
\f0\b0 \cf2  N, 
\f1\b \cf7 int
\f0\b0 \cf2  Q, \cf10 string\cf2 & blockCharacters, \cf10 vector\cf2 <
\f1\b \cf7 int
\f0\b0 \cf2 >& L,\
                         \cf10 vector\cf2 <
\f1\b \cf7 int
\f0\b0 \cf2 >& R) \{\
  \cf4 // 
\f1\b \cf15 TODO: Complete this function to count number of questions Anna can answer
\f0\b0 \cf2 \
  \cf4 // "yes" to\cf2 \
  
\f1\b \cf7 int
\f0\b0 \cf2  c = \cf9 0\cf2 ;\
  \
  
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 int
\f0\b0 \cf2  i = \cf9 0\cf2 ; i < L.\cf14 size\cf2 (); ++i) \{\
      \cf4 // if can be palindrome\cf2 \
      
\f1\b \cf7 if
\f0\b0 \cf2  (\cf13 yes\cf2 (blockCharacters, L[i], R[i])) ++c;\
  \}\
  \
  
\f1\b \cf7 return
\f0\b0 \cf2  c;\
\}\
\
\

\f1\b \cf7 int
\f0\b0 \cf2  \cf12 main\cf2 () \{\
\cf4 //    string s = "ABAACCA";\cf2 \
\cf4 //    cout << boolalpha << yes(s, 2, 5);\cf2 \
\cf4 //    exit(1);\cf2 \
  
\f1\b \cf7 int
\f0\b0 \cf2  T;\
  \cf4 // Get number of test cases\cf2 \
  \cf14 cin\cf2  >> T;\
  
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 int
\f0\b0 \cf2  tc = \cf9 1\cf2 ; tc <= T; tc++) \{\
    
\f1\b \cf7 int
\f0\b0 \cf2  N, Q;\
    \cf4 // Get number of blocks and number of questions\cf2 \
    \cf14 cin\cf2  >> N >> Q;\
\
    \cf10 string\cf2  blockCharacters;\
    \cf4 // Get the string representing the characters on the blocks\cf2 \
    \cf14 cin\cf2  >> blockCharacters;\
\
    \cf10 vector\cf2 <
\f1\b \cf7 int
\f0\b0 \cf2 > L(Q), R(Q);\
    
\f1\b \cf7 for
\f0\b0 \cf2  (
\f1\b \cf7 int
\f0\b0 \cf2  i = \cf9 0\cf2 ; i < Q; i++) \{\
      \cf14 cin\cf2  >> L[i] >> R[i];\
    \}\
\
    \cf14 cout\cf2  << \cf6 "Case #"\cf2  << tc << \cf6 ": "\cf2 \
         << \cf13 positiveAnswersCount\cf2 (N, Q, blockCharacters, L, R) << \cf14 endl\cf2 ;\
  \}\
  
\f1\b \cf7 return
\f0\b0 \cf2  \cf9 0\cf2 ;\
\}\
}